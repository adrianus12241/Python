Zad 6.1


class Time:

klasa reprezentująca odcinek czasu

    def __init__(self, s=0):
        self.s = int(s)

    def __str__(self):
        h = self.s / 3600
        sec = self.s - h * 3600
        m = sec / 60
        sec = sec - m * 60
        return "{0:02d}:{1:02d}:{2:02d}".format(h, m, sec)

    def __repr__(self):
        return "Time({0})".format(self.s)

    def __add__(self, other):
        return Time(self.s + other.s)

    def __cmp__(self, other):           # porównywanie, -1|0|+1
        return cmp(self.s, other.s)

    def __int__(self):                  # int(time1)
        return self.s

import unittest
class TestTime(unittest.TestCase):

    def setUp(self):
        self.zero = Time(0)

    def test_print(self):
        self.assertEqual(str(Time(46521)),"12:55:21")
        self.assertEqual(repr(Time(83)),"Time(83)")

    def test_add(self):
        self.assertEqual(Time(1) + Time(2), Time(3))

    def test_cmp(self):
        self.assertEqual(cmp(Time(1),Time(2)),-1)

    def test_int(self):
        self.assertEqual(int(Time(63)),63)

if __name__ == "__main__":
    unittest.main()     # wszystkie testy


Zad 6.5


class Frac:
    """Klasa reprezentujaca ulamek."""

    def __init__(self, x=0, y=1):
        self.x = x
        self.y = y

    def __str__(self):          # zwraca "x/y" lub "x" dla y=1
        if(self.x % self.y == 0):
            intr = self.x/self.y
            return "{}".format(intr)
        else:
            return "{}/{}".format(self.x,self.y)

    def __repr__(self):         # zwraca "Frac(x, y)"
        return "Frac({},{})".format(self.x,self.y)

    def __add__(self, other):   # frac1 + frac2
        from fractions import gcd
        nwd = gcd(self.y,other.y)
        count1 = self.y/nwd
        count2 = other.y/nwd
        numerator1 = self.x*count2
        numerator2 = other.x*count1
        denom = self.y*count2
        num = numerator1 + numerator2
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return Frac(intr,1)
        else: 
            return Frac(numerator,denominator)

    def __sub__(self, other):    # frac1 - frac2
        from fractions import gcd
        nwd = gcd(self.y,other.y)
        count1 = self.y/nwd
        count2 = other.y/nwd
        numerator1 = self.x*count2
        numerator2 = other.x*count1
        denom = self.y*count2
        num = numerator1 - numerator2
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return Frac(intr,1)
        else: 
            return Frac(numerator,denominator)

    def __mul__(self, other):    # frac1 * frac2
        from fractions import gcd
        num = self.x*other.x
        denom = self.y*other.y
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return Frac(intr,1)
        else: 
            return Frac(numerator,denominator)

    def __div__(self, other):    # frac1 / frac2
        from fractions import gcd
        num = self.x*other.y
        denom = self.y*other.x
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return Frac(intr,1)
        else: 
            return Frac(numerator,denominator)

    def __pos__(self):        # +frac = (+1)*frac
        if(self.x<0 and self.y<0):
            return Frac(-self.x,-self.y)
        else:
            return self

    def __neg__(self):          # -frac = (-1)*frac
        return Frac(-self.x, self.y)

    def __invert__(self):  # odwrotnosc: ~frac
        return Frac(self.y, self.x)

    def __cmp__(self, other):     # cmp(frac1, frac2)
        from fractions import gcd
        nwd = gcd(self.y,other.y)
        count1 = self.y/nwd
        count2 = other.y/nwd
        numerator1 = self.x*count2
        numerator2 = other.x*count1
        if(numerator1<numerator2):
            return -1
        elif(numerator1==numerator2):
            return 0
        else:
            return 1

    def __float__(self):       # float(frac)
        return self.x/float(self.y)

import unittest
class TestFrac(unittest.TestCase):

    def setUp(self):
        self.zero = Frac(0,1)

    def test_print(self):
        self.assertEqual(str(Frac(4,2)),"2")
        self.assertEqual(repr(Frac(1,2)),"Frac(1,2)")

    def test_add_frac(self):
        self.assertEqual(Frac(1,2) + Frac(1,3), Frac(5,6))

    def test_sub_frac(self):
        self.assertEqual(Frac(1,2) - Frac(1,3), Frac(1,6))

    def test_mul_frac(self):
        self.assertEqual(Frac(1,2) * Frac(1,3), Frac(1,6))

    def test_div_frac(self):
        self.assertEqual(Frac(1,2) / Frac(1,3), Frac(3,2))

    def test_pos(self):
        self.assertEqual(+Frac(1,2),Frac(1,2))

    def test_neg(self):
        self.assertEqual(-Frac(1,2),Frac(-1,2))

    def test_invert(self):
        self.assertEqual(~Frac(1,2),Frac(2,1))

    def test_cmp(self):
        self.assertEqual(cmp(Frac(1,2), Frac(1,3)),1)

    def test_float(self):
        self.assertEqual(float(Frac(1,2)),0.5)

if __name__ == "__main__":
    unittest.main()     # wszystkie testy
