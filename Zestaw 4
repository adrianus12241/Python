Zad 4.2


n = raw_input("Podaj dlugosc miarki: ")

def miarka(n): 
    try: 
        a = int(n) 
        line = ["|...."] 
        b = line*a 
        c = "".join(b) 
        print "%s|" %c 
        list = [] 
        for i in range(a+1):
            list.append(i)
        new = [str(x) for x in list]
        e = [word.ljust(5) for word in new]
        f = "".join(e)
        return f
    except ValueError: 
        g = "To nie jest liczba!"
        return g

print miarka(n)

----------------------------------------------------------------------------

m = raw_input("Podaj szerokosc prostokata: ")
o = raw_input("Podaj wysokosc prostokata: ")

def prostokat(m,o):
    try:
        a = int(m) 
        b = int(o)
        for i in range(b):
            line = ["+---"] 
            c = line*a 
            d = "".join(c)+"+"
            list = [] 
            for i in range(a+1):
                list.append("|")
            e = [word.ljust(4) for word in list]
            f = "".join(e)
            s = (d+"\n"+f+"\n")*b
        p = s+"%s" %d
        return p
    except ValueError:
        g = "To nie jest liczba!"
        return g

print prostokat(m,o)


Zad 4.3


n = raw_input("Podaj liczbe: ")

def factorial(n):
    try:
        a = int(n) 
        i = 1
        b = a
        d = a
        while (i<a):
            c = b - 1
            d = d*c
            b = c
            i = i + 1
        p = str(d)
        return p
    except ValueError:
        g = "To nie jest liczba!"
        return g

print factorial(n)


Zad 4.4


n = raw_input("Podaj numer wyrazu z ciagu Fibonacciego: ")
def fibonacci(n):
    try:
        a = int(n)
        c = a - 1
        i = 0
        d = 0
        e = 1
        if (a == 0 or a == 1):
            b = str(a)
            return b;
        else:
            while (i<c): 
                h = e
                e = e + d
                d = h
                i = i + 1
            f = str(e)
            return f;
    except ValueError:
        g = "To nie jest liczba!"
        return g
print fibonacci(n)


Zad 4.5


def odwracanie(L,left,right):
S = L[:]
    if(left!=0):
        for i in range(left):
            L.remove(L[0])
    if(right!=0):
        for i in range((len(S)-right)-1):
            L.remove(L[-1])
    L.reverse()
    if(left!=0):
        for i in range(left):
            L.insert(i,S[i])
    n = len(L)
    if(right!=0):
        for i in range((len(S)-right)-1):
            L.insert(n,S[-(i+1)])
    return L

L = [1,2,3,4,5,6,7,8,9,10]
print L
print odwracanie(L,0,8)

-----------------------------------------------------------

def odwracanieRek(L,left,right):
    K = (right - left)/2
    if(K>=0):
        L[left],L[right] = L[right],L[left]
        odwracanieRek(L,left+1,right-1)

H2 = [3,2,1,6,7]
print H2
odwracanieRek(H2,1,3)
print H2


Zad 4.6


L = ["cos",10,(10,10),[12,"strings"],[[[[[5]]]]],[2,(5,30)],"string",3,[11]]
def sum_seq(sequence):
    if(isinstance(sequence,(list,tuple))):
        for item in sequence:
            if(isinstance(item,str)):
                sequence.remove(item)
        if(len(sequence) == 0):
            return 0
        return sum_seq(sequence[0])+sum_seq(sequence[1:])
    else:
        return sequence
print(sum_seq(L)) 


Zad 4.7


def flatten(sequence):
    if isinstance(sequence, (list, tuple)):
        P = []
        if(len(sequence)!=0):
            P = P + flatten(sequence[0]) + flatten(sequence[1:]) 
        return P 
    else:
        return [sequence]
 seq = [1, (2, 3), [], [4, (5, 6, 7)], 8, [9]]
print(flatten(seq))
