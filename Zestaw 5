-----------------------------------------------------------------------------
rekurencja.py




import sys

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)

def fibonacci(n):
    if n == 0 or n == 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

def tester():                 
    print "text"

if __name__ == "__main__":
    status = tester()
    sys.exit(status)


Zad 5.1


import rekurencja

import rekurencja as rek

print rek.factorial(8)
print rek.fibonacci(8)

from rekurencja import *

print factorial(9)
print fibonacci(9)

from rekurencja import factorial

print factorial(5)

from rekurencja import fibonacci as fib

print fib(5)



-----------------------------------------------------------------------
fracs.py




import sys

def add_frac(frac1, frac2):
    if(type(frac1) is not list or type(frac2) is not list):
        return "args error"
    elif(len(frac1) is not 2 or len(frac2) is not 2):
        return "args error"
    elif(type(frac1[0]) is not int or type(frac1[1]) is not int or type(frac2[0]) is not int or type(frac2[1]) is not int):
        return "args error"
    elif(frac1[1]==0 or frac2[1]==0):
        return "denominator can not be 0"
    else:
        from fractions import gcd
        nwd = gcd(frac1[1],frac2[1])
        count1 = frac1[1]/nwd
        count2 = frac2[1]/nwd
        numerator1 = frac1[0]*count2
        numerator2 = frac2[0]*count1
        denom = frac1[1]*count2
        num = numerator1 + numerator2
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return intr
        else: 
            frac = [numerator,denominator]
            return frac

def sub_frac(frac1, frac2):
    if(type(frac1) is not list or type(frac2) is not list):
        return "args error"
    elif(len(frac1) is not 2 or len(frac2) is not 2):
        return "args error"
    elif(type(frac1[0]) is not int or type(frac1[1]) is not int or type(frac2[0]) is not int or type(frac2[1]) is not int):
        return "args error"
    elif(frac1[1]==0 or frac2[1]==0):
        return "denominator can not be 0"
    else:
        from fractions import gcd
        nwd = gcd(frac1[1],frac2[1])
        count1 = frac1[1]/nwd
        count2 = frac2[1]/nwd
        numerator1 = frac1[0]*count2
        numerator2 = frac2[0]*count1
        denom = frac1[1]*count2
        num = numerator1 - numerator2
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return intr
        else: 
            frac = [numerator,denominator]
            return frac

def mul_frac(frac1, frac2):
    if(type(frac1) is not list or type(frac2) is not list):
        return "args error"
    elif(len(frac1) is not 2 or len(frac2) is not 2):
        return "args error"
    elif(type(frac1[0]) is not int or type(frac1[1]) is not int or type(frac2[0]) is not int or type(frac2[1]) is not int):
        return "args error"
    elif(frac1[1]==0 or frac2[1]==0):
        return "denominator can not be 0"
    elif(frac1[0]==0 or frac2[0]==0):
        return 0
    else:
        from fractions import gcd
        num = frac1[0]*frac2[0]
        denom = frac1[1]*frac2[1]
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return intr
        else: 
            frac = [numerator,denominator]
            return frac

def div_frac(frac1, frac2): 
    if(type(frac1) is not list or type(frac2) is not list):
        return "args error"
    elif(len(frac1) is not 2 or len(frac2) is not 2):
        return "args error"
    elif(type(frac1[0]) is not int or type(frac1[1]) is not int or type(frac2[0]) is not int or type(frac2[1]) is not int):
        return "args error"
    elif(frac1[1]==0 or frac2[1]==0):
        return "denominator can not be 0"
    elif(frac1[0]==0):
        return 0
    elif(frac2[0]==0):
        return "dividing by 0"
    else:
        from fractions import gcd
        num = frac1[0]*frac2[1]
        denom = frac1[1]*frac2[0]
        divisor = gcd(num,denom)
        numerator = num/divisor
        denominator = denom/divisor
        if(numerator % denominator == 0):
            intr = numerator/denominator
            return intr
        else: 
            frac = [numerator,denominator]
            return frac

def is_positive(frac): 
    if(type(frac) is not list):
        return "args error"
    elif(len(frac) is not 2):
        return "args error"
    elif(type(frac[0]) is not int or type(frac[1]) is not int):
        return "args error"
    elif(frac[1]==0):
        return "denominator can not be 0"
    elif(frac[0]==0):
        return "this is zero"
    else:
        if(frac[0]<0 and frac[1]<0):
            return True
        elif(frac[0]<0 and frac[1]>0):
            return False
        elif(frac[0]>0 and frac[1]<0):
            return False
        else:
            return True

def is_zero(frac): 
    if(type(frac) is not list):
        return "args error"
    elif(len(frac) is not 2):
        return "args error"
    elif(type(frac[0]) is not int or type(frac[1]) is not int):
        return "args error"
    elif(frac[1]==0):
        return "denominator can not be 0"
    else:
        if(frac[0]==0):
            return True
        else:
            return False

def cmp_frac(frac1, frac2): 
    if(type(frac1) is not list or type(frac2) is not list):
        return "args error"
    elif(len(frac1) is not 2 or len(frac2) is not 2):
        return "args error"
    elif(type(frac1[0]) is not int or type(frac1[1]) is not int or type(frac2[0]) is not int or type(frac2[1]) is not int):
        return "args error"
    elif(frac1[1]==0 or frac2[1]==0):
        return "denominator can not be 0"
    else:
        from fractions import gcd
        nwd = gcd(frac1[1],frac2[1])
        count1 = frac1[1]/nwd
        count2 = frac2[1]/nwd
        numerator1 = frac1[0]*count2
        numerator2 = frac2[0]*count1
        if(numerator1<numerator2):
            return -1
        elif(numerator1==numerator2):
            return 0
        else:
            return 1

def frac2float(frac): 
    if(type(frac) is not list):
        return "args error"
    elif(len(frac) is not 2):
        return "args error"
    elif(type(frac[0]) is not int or type(frac[1]) is not int):
        return "args error"
    elif(frac[1]==0):
        return "denominator can not be 0"
    else:
        return frac[0]/float(frac[1])

def tester():                 
    print "text"

if __name__ == "__main__":
    status = tester()
    sys.exit(status)


Zad 5.2


import unittest
from fracs import *

class TestFractions(unittest.TestCase):
def setUp(self):
        self.zero = [0, 1]
def test_add_frac(self):
        self.assertEqual(add_frac([1, 2], [1, 3]), [5, 6])
def test_sub_frac(self):
        self.assertEqual(sub_frac([1, 2], [1, 3]), [1, 6])
def test_mul_frac(self):
        self.assertEqual(mul_frac([1, 2], [1, 3]), [1, 6])
def test_div_frac(self):
        self.assertEqual(div_frac([1, 2], [1, 3]), [3, 2])
def test_is_positive(self):
        self.assertEqual(is_positive([1, 2]), True)
def test_is_zero(self):
        self.assertEqual(is_zero([1, 2]), False)
def test_cmp_frac(self):
        self.assertEqual(cmp_frac([1, 2], [1, 3]), 1)
def test_frac2float(self):
        self.assertEqual(frac2float([1, 2]), 0.5)
if __name__ == '__main__':
    unittest.main()     
