Zad 8.1

def solve1(a, b, c):
    #Rozwiazywanie rownania liniowego a x + b y + c = 0.
    if(a == 0 and b != 0):
        y = -(c/float(b))
        print "x = dowolna liczba z zakresu wszystkich liczb rzeczywistych"
        print "y = {}".format(y)
    elif(a != 0 and b == 0):
        x = -(c/float(a))
        print "x = {}".format(x)
        print "y = dowolna liczba z zakresu wszystkich liczb rzeczywistych"
    elif(a != 0 and b != 0):
        a1 = -(a/float(b))
        b1 = -(c/float(b))
        print "x = liczba z zakresu wszystkich liczb rzeczywistych"
        if(b1 < 0):
            print "y = {}x{}".format(a1,b1)
        else:
            print "y = {}x+{}".format(a1,b1)
    else:
        print "rownanie nie ma rozwiazania"

solve1(1,2,3)



Zad 8.3

from random import *
from points import Point

def MCpi(iter):
    count = 0
    for i in range(iter):
        point = Point(random(),random())
        if(point.length() <= 1):
            count += 1
    pi = 4*count/float(iter)
    return pi

print MCpi(10000)
print MCpi(10000)
print MCpi(100000)
print MCpi(100000)
print MCpi(1000000)
print MCpi(1000000)



points

from math import sqrt
class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
       
    def __str__(self):    
        return "(%s, %s)" % (self.x, self.y)
       
    def __repr__(self):      
        return "Point(%s, %s)" % (self.x, self.y)
       
    def __eq__(self, other):  
        if self.x == other.x and self.y == other.y:
            return True
        else:
            return False
           
    def __ne__(self, other):
        return not self == other
   
    def __add__(self, other):
        return Point(self.x+other.x, self.y+other.y)
       
    def __sub__(self, other):
        return Point(self.x-other.x, self.y-other.y)
       
    def __mul__(self, other):
        return self.x*other.x + self.y*other.y
       
    def cross(self, other):  
        return self.x * other.y - self.y * other.x
       
    def length(self):        
        return sqrt(self.x*self.x+self.y*self.y)
        
        
        
Zad 8.4
        
from math import sqrt

def heron(a, b, c):
    """Obliczanie pola powierzchni trojkata za pomocą wzoru
    Herona. Dlugosci bokow trojkąta wynosza a, b, c."""
    if((a + b <= c) or (a + c <= b) or (b + c <= a)):
        raise ValueError("warunek trojkata nie zostal spelniony")
    H = (sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c)))/float(4)
    return H

print heron(3,4,5)



Zad 8.6

import time

def P(i,j):
    dict = {(0,0): 0.5, (0,1): 1.0, (1,0): 0.0}
    if(i < 0 or j < 0):
        raise ValueError("<args error>")
    elif(i == 0 and j != 0):
        return 1.0
    elif(i != 0 and j == 0):
        return 0.0
    else:
        val = dict.get((i,j))
        if(val != None):
            return val
        else:
            val = 0.5*(P(i-1, j) + P(i, j-1))
            dict[(i,j)] = val
            return val

def P_rec(i,j):
    if(i < 0 or j < 0):
        raise ValueError("<args error>")
    elif(i == 0 and j == 0):
        return 0.5
    elif(i != 0 and j == 0):
        return 0.0
    elif(i == 0 and j != 0):
        return 1.0
    else:
        return 0.5*(P_rec(i-1, j) + P_rec(i, j-1))

print P(1,6)
print "Czas:"
start1 = time.clock()
P(1,6)
end1 = time.clock() - start1     
print end1
print "-----------------------------"
print P_rec(1,6)
print "Czas_rec:"
start2 = time.clock()
P_rec(1,6)
end2 = time.clock() - start2  
print end2


